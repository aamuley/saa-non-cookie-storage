<pre class="metadata">
Title: Extending Storage Access API (SAA) to non-cookie storage
Shortname: saa-non-cookie-storage
Repository: privacycg/saa-non-cookie-storage
URL: https://privacycg.github.io/saa-non-cookie-storage/
Editor: Ari Chivukula, w3cid 132484, Google https://google.org, arichiv@google.com
Editor: Johann Hofmann, w3cid 120436, Google https://google.com, johannhof@google.com
Abstract: This extends the Storage Access API to enable content in cross-site iframes to request access to first-party data beyond cookies.
Status Text: This specification is intended to be merged into the HTML Living Standard. It is neither a WHATWG Living Standard nor is it on the standards track at W3C.
Text Macro: LICENSE <a href=https://creativecommons.org/licenses/by/4.0/>Creative Commons Attribution 4.0 International License</a>
Group: privacycg
Status: CG-DRAFT
Level: None
Markup Shorthands: markdown yes, css no
Complain About: accidental-2119 true
</pre>

<pre class=link-defaults>
spec:html; type:dfn; for:site; text:same site
</pre>

<pre class="anchors">
spec: storage-access; urlPrefix: https://privacycg.github.io/storage-access/
    type: dfn
        for: environment
            text: has storage access; url: #environment-has-storage-access
        text: unpartitioned data; url: #unpartitioned-data
        text: first-party-site context; url: #first-party-site-context
        text: third party context; url: #third-party-context
</pre>

<pre class=biblio>
{
    "STORAGE-ACCESS": {
        "authors": [
            "Benjamin VanderSloot",
            "Johann Hofmann",
            "Anne van Kesteren"
        ],
        "href": "https://privacycg.github.io/storage-access/",
        "publisher": "W3C",
        "title": "The Storage Access API"
    }
}
</pre>

<section class="non-normative">

<h2 id="intro">Introduction</h2>

<em>This section is non-normative.</em>

The Storage Access API (SAA) enables content inside <{iframe}>s to request and be granted access to their client-side storage, so that embedded content which relies on having access to client-side storage can work in such User Agents. [[STORAGE-ACCESS]]

This specification extends the client-side storage available beyond cookies.

</section>

<h2 id="extending-saa-to-non-cookie-storage">Extending SAA to non-cookie storage</h2>

This specification defines a method to request access to [=unpartitioned data=] beyond just cookies ({{Document/requestStorageAccess(types)}}), and a method to check if cookie access has specifically been granted ({{Document/hasUnpartitionedCookieAccess()}}).

<div class=example>

Alex visits `https://social.example/`. The page sets a some local storage. This local storage has been set in a [=first-party-site context=].

```javascript
window.localStorage.setItem("userid", "1234");
```

Later on, Alex visits `https://video.example/`, which has an <{iframe}> on it which loads `https://social.example/heart-button`. In this case, the `social.example` {{Document}} |doc| is in a [=third party context=], and the local storage set previously might or might not be visible depending on User Agent storage access policies.

Script in the <{iframe}> can call |doc|`.`{{Document/requestStorageAccess(types)}} to request access.

```javascript
let handle = await document.requestStorageAccess({localStorage: true});
let userid = handle.localStorage.getItem("userid");
```

</div>

<h3 id="document-changes">Changes to {{Document}}</h3>

<pre class="idl">
dictionary StorageAccessTypes {
  boolean all = false;
  boolean cookies = false;
};

interface StorageAccessHandle {
};

partial interface Document {
  Promise&lt;boolean> hasUnpartitionedCookieAccess();
  Promise&lt;StorageAccessHandle> requestStorageAccess(StorageAccessTypes types);
};
</pre>

When invoked on {{Document}} |doc|, the <dfn export method for=Document><code>hasUnpartitionedCookieAccess()</code></dfn> method must run these steps:

1. Return the invocation of {{Document/hasStorageAccess()}} on |doc|.

Note:
Now that {{Document/requestStorageAccess(types)}} <span class=allow-2119>can</span> be used to request [=unpartitioned data=] with or without specifically requesting cookies, it <span class=allow-2119>must</span> be made clear that {{Document/hasStorageAccess()}} only returns true if [=first-party-site context=] cookies are accessable to the current document.
As a function name, {{Document/hasUnpartitionedCookieAccess()}} more clearly communicates this.
For now {{Document/hasStorageAccess()}} is not considered deprecated, but that <span class=allow-2119>may</span> be worth taking up in future.

When invoked on {{Document}} |doc|, the <dfn export method for=Document><code>requestStorageAccess(types)</code></dfn> method must run these steps:

1. Let |p| be [=a new promise=].
1. If |types|.{{StorageAccessTypes/all}} is `false` and |types|.{{StorageAccessTypes/cookies}} is `false`:
    1. [=/Reject=] |p| with an "{{InvalidStateError}}" {{DOMException}}.
    1. Return |p|.
1. Let |requestUnpartitionedCookieAccess| be `true` if |types|.{{StorageAccessTypes/all}} is `true` or |types|.{{StorageAccessTypes/cookies}} is `true`, and `false` otherwise.
1. Let |accessPromise| be the result of running [=request storage access=] with |doc| with |requestUnpartitionedCookieAccess|.
1. If |accessPromise| [=/rejects=] with `reason` |r|:
    1. [=/Reject=] |p| with |r|.
1. Else:
    1. Let |handle| be a new object of type {{StorageAccessHandle}} with |types|.
    1. [=/Resolve=] |p| with |handle|.
1. Return |p|.


<h3 id="request-storage-access-changes">Changes to {{Document/requestStorageAccess()}}</h3>

Redefine {{Document/requestStorageAccess()}} to:
1. Return the result of running [=request storage access=] with |doc| and |requestUnpartitionedCookieAccess| being `true`.

Modify {{Document/requestStorageAccess()}} to instead be the algorithm <dfn export>request storage access</dfn> which takes a {{Document}} |doc| and a `boolean` argument |requestUnpartitionedCookieAccess|.

Modify {{Document/requestStorageAccess()}} at step 14.1.1.1.1 to read:

1. If |requestUnpartitionedCookieAccess| is `true`, then set <var ignore='monkeypatch'>global</var>'s [=environment/has storage access=] to true.

Modify {{Document/requestStorageAccess()}} at step 14.3 to read:

3. If |explicitSetting| is "`disallow`" and |requestUnpartitionedCookieAccess| is `true`:

Modify {{Document/requestStorageAccess()}} at step 14.5 to read:

5. [=Assert=]: |explicitSetting| is "`none`" or |requestUnpartitionedCookieAccess| is `false`.

<h3 id="storage">Changes to various client-side storage mechanisms</h3>

<h4 id="dom-storage">DOM Storage</h4>

TBD

<h4 id="indexed-db">IndexedDB</h4>

TBD

<h4 id="web-locks">Web Locks</h4>

TBD

<h4 id="cache-storage">Cache Storage</h4>

TBD

<h4 id="storage-manager">Storage Manager</h4>

TBD

<h4 id="file-api">File API</h4>

TBD

<h4 id="broadcast-channel">Broadcast Channel</h4>

TBD

<h4 id="shared-worker">Shared Worker</h4>

TBD

<h2 id="privacy">Security & Privacy considerations</h2>

In extending an existing access-granting API, care must be taken not to open additional security issues or abuse vectors relative to comprehensive cross-site cookie blocking and storage partitioning.
Except for Service Workers (which will not be supported in this extension) non-cookie storage and communication APIs don't enable any capability that could not be built with cookie access alone.

For more detailed discussions see [[STORAGE-ACCESS#privacy]] and [[STORAGE-ACCESS#security]].
